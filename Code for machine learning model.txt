import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from itertools import cycle
plt.rcParams['figure.figsize']=(25, 10)
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import label_binarize, LabelEncoder
from sklearn.multiclass import OneVsRestClassifier 
from sklearn.impute import SimpleImputer
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import roc_auc_score
from sklearn.metrics import precision_score
from sklearn.metrics import accuracy_score
from sklearn.datasets import make_classification
from sklearn.metrics import make_scorer
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_validate, KFold
from scipy import interp
# read data
dataset=pd.read_csv(r'D:\1work\1 PhD\RFPPCP\PPCPhuman.csv')
# Splitting the dataset into the training set and test set
X=dataset.drop(['Risk_level','risklevel'],axis=1)
y=dataset['risklevel']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=90,stratify=y)
skf = KFold(n_splits=10,shuffle=True, random_state=1412)
# five candidate models
from xgboost import XGBClassifier
xgbcmodel=XGBClassifier()
xgbcmodel.fit(X_train,y_train)
from sklearn.ensemble import RandomForestClassifier
rfcmodel=RandomForestClassifier()
rfcmodel.fit(X_train,y_train)
from sklearn.neighbors import KNeighborsClassifier
knn_model=KNeighborsClassifier()
knnmodel.fit(X_train,y_train)
from sklearn.svm import SVC
svcmodel=SVC()
svcmodel.fit(X_train,y_train)
from sklearn.neural_network import MLPClassifier
NNmodel= MLPClassifier()
NNmodel.fit(X_train,y_train)
print("\tXGBoost：",cross_val_score(xgbc_model,X_train,y_train,cv=skf).mean())
print("\tRandomforst：",cross_val_score(rfc_model,X_train,y_train,cv=skf).mean())
print("\tKNN：",cross_val_score(knn_model,X_train,y_train,cv=skf).mean())
print("\tSVC：",cross_val_score(svc_model,X_train,y_train,cv=skf).mean())
print("\tNN：",cross_val_score(NN_model,X_train,y_train,cv=skf).mean())
#chose the random forest model

scorel = []
for i in range(20,500,1):
    rfc1 = RandomForestClassifier(n_estimators=i, n_jobs=-1, random_state=70)
    score = cross_val_score(rfc1, X_train, y_train, cv=skf).mean()
    scorel.append(score)
print(max(scorel),(scorel.index(max(scorel))))
plt.figure(figsize=[20,5])
plt.plot(range(20,500,1),scorel)
plt.show()

param_grid = {'max_depth':np.arange(1,30,1)} 
rfc1 = RandomForestClassifier(n_estimators=90,random_state=70)
GS = GridSearchCV(rfc1,param_grid,cv=skf)
GS.fit(X_train,y_train)
GS.best_params_
GS.best_score_
param_grid={'min_samples_leaf':np.arange(1, 11, 1)}
rfc = RandomForestClassifier(n_estimators=90,random_state=70,max_depth=9)
GS = GridSearchCV(rfc,param_grid,cv=skf)
GS.fit(X_train,y_train)
GS.best_params_
GS.best_score_

param_grid={'min_samples_split':np.arange(2, 2+20, 1)}
rfc = RandomForestClassifier(n_estimators=90,random_state=70,max_depth=9,min_samples_leaf=1)
GS = GridSearchCV(rfc,param_grid,cv=skf)
GS.fit(X_train,y_train)
GS.best_params_
GS.best_score_

param_grid = {'max_features':np.arange(1,10,1)} 
rfc = RandomForestClassifier(n_estimators=90,random_state=70,max_depth=9,min_samples_leaf=1,min_samples_split=2)
GS = GridSearchCV(rfc,param_grid,cv=skf)
GS.fit(X_train,y_train)
GS.best_params_
GS.best_score_

param_grid = {'criterion':['gini', 'entropy']}
rfc = RandomForestClassifier(n_estimators=90,random_state=70,max_depth=9,min_samples_leaf=1,min_samples_split=2,max_features=10)
GS = GridSearchCV(rfc,param_grid,cv=skf)
GS.fit(X_train,y_train)
GS.best_params_
GS.best_score_

#final random forest model
finalrfc = RandomForestClassifier(n_estimators=90,random_state=70,max_depth=9,min_samples_leaf=1,min_samples_split=2,max_features=10,criterion= 'gini')
#shap analysis
import shap
shap.initjs()
explainer=shap.TreeExplainer(finalrfc)
shap_values = explainer.shap_values(X_train)
shap.summary_plot(shap_values[:, :, 1], X_train)
shap.summary_plot(shap_values[:, :, 1], X_train,plot_type='bar')
shap.dependence_plot('precipitation',shap_values[:, :, 1], X_train,interaction_index=None)
shap.dependence_plot('temperature',shap_values[:, :, 1], X_train,interaction_index=None)
shap.dependence_plot('GDP',shap_values[:, :, 1], X_train,interaction_index=None)
shap.dependence_plot('population',shap_values[:, :, 1], X_train,interaction_index=None)